import { UserFunctionOptions } from "./createUserFunction";
type Role = "system" | "user" | "assistant" | "function";
export type Message = {
    content: string;
    role: Role;
    name?: string;
    function_call?: {
        name: string;
        arguments: string;
    };
};
type ResponseChunk = {
    id: string;
    object: "chat.completion.chunk";
    created: number;
    model: string;
    choices: {
        index: number;
        finish_reason: string | null;
        delta: {
            content: null;
            role?: Role;
            function_call?: {
                name?: string;
                arguments?: string;
            };
        } | {
            content: string;
        } | {
            role: Role;
        } | {};
    }[];
};
type OnUpdate = (options: {
    cancel: () => void;
    message: ResponseChunk;
}) => void;
export type CompletionsOptions = {
    apiUrl?: string;
    onUpdate?: OnUpdate;
    apiKey: string;
    model: string;
    messages: Message[];
    temperature?: number;
    topP?: number;
    n?: number;
    stop?: string | string[];
    frequencyPenalty?: number;
    presencePenalty?: number;
    logitBias?: Record<string, number>;
    maxTokens?: number;
    user?: string;
    functionCall?: "auto" | "none" | {
        name: string;
    };
    functions?: UserFunctionOptions[];
};
export type Choice = {
    role: Role;
    content: string;
    finishReason: string;
    function_call?: {
        name: string;
        arguments: string;
    };
    functionCall?: {
        name: string;
        arguments: Record<string, any>;
    };
};
export type CompletionResponse = {
    choices: Choice[];
};
export declare const createCompletions: (options: CompletionsOptions) => Promise<CompletionResponse>;
export {};
