"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_assert_1 = require("node:assert");
const node_test_1 = require("node:test");
const createChat_1 = require("./createChat");
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = require("path");
dotenv_1.default.config({ path: (0, path_1.join)(__dirname, "..", ".env") });
const { OPENAI_API_KEY } = process.env;
if (!OPENAI_API_KEY) {
    throw new Error("OPENAI_API_KEY must be set");
}
(0, node_test_1.test)("sends a message and receives a response", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    const response = await chat.sendMessage('respond with "pong"');
    node_assert_1.strict.match(response.content, /pong/i);
});
(0, node_test_1.test)("remembers conversation", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    await chat.sendMessage("My name is John");
    const response = await chat.sendMessage("What is my name?");
    node_assert_1.strict.match(response.content, /John/);
});
(0, node_test_1.test)("streams progress", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    const onUpdate = node_test_1.mock.fn((message) => {
        console.log(message);
    });
    await chat.sendMessage("continue sequence: a b c", {
        onUpdate,
    });
    node_assert_1.strict.ok(onUpdate.mock.calls.length > 0);
});
(0, node_test_1.test)("get messages", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    await chat.sendMessage('respond with "pong"');
    const messages = chat.getMessages();
    node_assert_1.strict.equal(messages.length, 2);
});
(0, node_test_1.test)("restore conversation", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    const chatLog = [
        {
            content: "what number comes after 2133",
            role: "user",
        },
        { role: "assistant", content: "2134" },
    ];
    for (const message of chatLog) {
        chat.addMessage(message);
    }
    const response = await chat.sendMessage("repeat the last answer");
    node_assert_1.strict.match(response.content, /2134/);
});
(0, node_test_1.test)("cancel response", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    await node_assert_1.strict.rejects(chat.sendMessage("continue sequence: a b c", {
        onUpdate: ({ cancel }) => {
            cancel();
        },
    }));
});
(0, node_test_1.test)("calls user defined function", async () => {
    const getCurrentWeather = node_test_1.mock.fn(() => {
        return {
            location: "Albuquerque",
            temperature: "72",
            unit: "fahrenheit",
            forecast: ["sunny", "windy"],
        };
    });
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo-0613",
        functions: [
            {
                name: "get_current_weather",
                description: "Get the current weather in a given location",
                parameters: {
                    type: "object",
                    properties: {
                        location: {
                            type: "string",
                            description: "The city and state, e.g. San Francisco, CA",
                        },
                        unit: { type: "string", enum: ["celsius", "fahrenheit"] },
                    },
                    required: ["location"],
                },
                function: getCurrentWeather,
            },
        ],
        functionCall: "auto",
    });
    const response = await chat.sendMessage("What is the weather in Albuquerque?");
    node_assert_1.strict.equal(response.role, "assistant");
    node_assert_1.strict.match(response.content, /(the current weather in Albuquerque)|(weather in Albuquerque is currently|the current temperature in Albuquerque)/i);
    // @ts-expect-error TODO
    node_assert_1.strict.equal(response.functionCall.name, "get_current_weather");
    // @ts-expect-error TODO
    node_assert_1.strict.match(response.functionCall.arguments.location, /Albuquerque/);
});
(0, node_test_1.test)("calls user identified function", async () => {
    const getCurrentWeatherV1 = node_test_1.mock.fn(() => {
        return {
            location: "Albuquerque",
            temperature: "72",
            unit: "fahrenheit",
            forecast: ["sunny", "windy"],
        };
    });
    const getCurrentWeatherV2 = node_test_1.mock.fn(() => {
        return {
            location: "Albuquerque",
            temperature: "72",
            unit: "fahrenheit",
            forecast: ["sunny", "windy"],
        };
    });
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo-0613",
        functions: [
            {
                name: "get_current_weather_v1",
                description: "Get the current weather in a given location",
                parameters: {
                    type: "object",
                    properties: {
                        location: {
                            type: "string",
                            description: "The city and state, e.g. San Francisco, CA",
                        },
                        unit: { type: "string", enum: ["celsius", "fahrenheit"] },
                    },
                    required: ["location"],
                },
                function: getCurrentWeatherV1,
            },
            {
                name: "get_current_weather_v2",
                description: "Get the current weather in a given location",
                parameters: {
                    type: "object",
                    properties: {
                        location: {
                            type: "string",
                            description: "The city and state, e.g. San Francisco, CA",
                        },
                        unit: { type: "string", enum: ["celsius", "fahrenheit"] },
                    },
                    required: ["location"],
                },
                function: getCurrentWeatherV2,
            },
        ],
        functionCall: "auto",
    });
    await chat.sendMessage("What is the weather in Albuquerque?", {
        functionCall: {
            name: "get_current_weather_v2",
        },
    });
    node_assert_1.strict.equal(getCurrentWeatherV1.mock.calls.length, 0);
    node_assert_1.strict.equal(getCurrentWeatherV2.mock.calls.length, 1);
});
(0, node_test_1.test)("overrides function call", async () => {
    const getCurrentWeather = node_test_1.mock.fn(() => {
        return {
            location: "Albuquerque",
            temperature: "72",
            unit: "fahrenheit",
            forecast: ["sunny", "windy"],
        };
    });
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo-0613",
        functions: [
            {
                name: "get_current_weather",
                description: "Get the current weather in a given location",
                parameters: {
                    type: "object",
                    properties: {
                        location: {
                            type: "string",
                            description: "The city and state, e.g. San Francisco, CA",
                        },
                        unit: { type: "string", enum: ["celsius", "fahrenheit"] },
                    },
                    required: ["location"],
                },
                function: getCurrentWeather,
            },
        ],
    });
    await chat.sendMessage("What is the weather in Chicago?", {
        functionCall: "none",
    });
    node_assert_1.strict.equal(getCurrentWeather.mock.calls.length, 0);
});
(0, node_test_1.test)("overrides message options", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    const response = await chat.sendMessage("what is the next token in this sequence: a b c", {
        maxTokens: 1,
        // token 34093 is "boo"
        logitBias: { "34093": 100 },
    });
    node_assert_1.strict.equal(response.finishReason, "length");
    node_assert_1.strict.equal(response.content, "boo");
});
(0, node_test_1.test)("returns structured data", async () => {
    const chat = (0, createChat_1.createChat)({
        apiKey: OPENAI_API_KEY,
        model: "gpt-3.5-turbo",
    });
    const response = await chat.sendMessage("Suggest a random startup name", {
        expect: {
            examples: [
                {
                    name: "OpenAI",
                    domain: "openai.com",
                },
            ],
            schema: {
                additionalProperties: false,
                type: "object",
                properties: {
                    name: { type: "string" },
                    domain: { type: "string" },
                },
                required: ["name", "domain"],
            },
        },
    });
    (0, node_assert_1.strict)(typeof response.content === "object");
    (0, node_assert_1.strict)("name" in response.content);
    (0, node_assert_1.strict)("domain" in response.content);
    // force next version release
});
