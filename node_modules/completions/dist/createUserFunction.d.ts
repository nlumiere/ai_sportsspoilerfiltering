import { z } from "zod";
import { AnySchemaObject } from "ajv";
export declare const FunctionZodSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    parameters: z.ZodType<AnySchemaObject, z.ZodTypeDef, AnySchemaObject>;
    function: z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    function: (...args: unknown[]) => unknown;
    name: string;
    parameters: import("ajv").SchemaObject | import("ajv").AsyncSchema;
    description?: string | undefined;
}, {
    function: (...args: unknown[]) => unknown;
    name: string;
    parameters: import("ajv").SchemaObject | import("ajv").AsyncSchema;
    description?: string | undefined;
}>;
export type UserFunctionOptions = {
    name: string;
    description?: string;
    parameters: AnySchemaObject;
    function: (...args: any[]) => any;
};
export type UserFunction = ReturnType<typeof createUserFunction>;
export declare const createUserFunction: (options: UserFunctionOptions) => {
    name: string;
    description: string | undefined;
    parameters: import("ajv").SchemaObject | import("ajv").AsyncSchema;
    function: (...args: any[]) => any;
    parseArguments: (argsString: string) => any;
};
